---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "webhook-cert-gen.fullname" . }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-100"
    helm.sh/hook-delete-policy: before-hook-creation
rules:
  ## For certificate generation
  - apiGroups: ["certificates.k8s.io"]
    resources: ["certificatesigningrequests", "certificatesigningrequests/approval"]
    verbs: [create, update, get]

  - apiGroups: ["certificates.k8s.io"]
    resources: ["certificatesigningrequests"]
    resourceNames:
      - {{ .Values.webhook.name | quote }}
    verbs: [delete]

  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
    # Restrict access to just the webhook configurations named
    resourceNames:
      - {{ .Values.webhook.name }}
    verbs: [get, update]

  # This configmap is autogenerated by Kubernetes and only exists in the
  # kube-system namespace, saves creating another role and rolebinding
  - apiGroups: [""]
    resources: [configmaps]
    resourceNames: [extension-apiserver-authentication]
    verbs: [get]
    
  - apiGroups: [certificates.k8s.io]
    resourceNames: [kubernetes.io/legacy-unknown]
    resources: [signers]
    verbs: [approve]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "webhook-cert-gen.fullname" . }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-100"
    helm.sh/hook-delete-policy: before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "webhook-cert-gen.fullname" . | quote }}
subjects:
  - kind: ServiceAccount
    name: {{ include "webhook-cert-gen.serviceAccountName" . }}
    namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "webhook-cert-gen.fullname" . }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-100"
    helm.sh/hook-delete-policy: before-hook-creation
rules:
  ## For certificate generation
  - apiGroups: [""]
    resources: [secrets]
    verbs: [create, update, get, patch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "webhook-cert-gen.fullname" . }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-100"
    helm.sh/hook-delete-policy: before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "webhook-cert-gen.fullname" . }}
subjects:
  - kind: ServiceAccount
    name: {{ include "webhook-cert-gen.serviceAccountName" . }}
    namespace: {{ .Release.Namespace }}